Task:
 to collect apps' requests response times (messages <key:value>).

Conditions:
 message = <request : response time>
 another service is responsible for aggregation and representation of the results.
 collection service should be independent from a query service/app/client
 10 apps, 10K messages per second initially, with further increase of system utilization by 10^3 (not clear what this means)
 system can be off the shelf of home built

Expected outcome:
 make a drawing of the system; explain characteristics of each part of the system and potential limits of scalability/performance bottle necks

Larger picture:
 looks like there is a desire to monitor availability, performance and (most likely) collection of the REF data for further analyses.



Solution Discussion:

 the performance monitoring system (APM) is to have 2 independent services : metrics collection and metrics reporting.
 the collection service should not interfere with the application and vice verse -application does  not dependent on the collection service;
 the application will send JSON type messages and,  probably in the future, there will be a desire to collect more information about application and connected clients - > both the complexity and frequency of the messages will increase.

The task provides no information about the delivery time frame or budget.

As such, i'll use my experience for the similiar situations.

The intital conceptual model:
 a. collection service
 b. persistance service (data storage layer)
 c. query service
 
Collection service:
 a. an app should be "dumping" messages - none or minimal wait for the message receipt confirmation 
 b. messages across installation base will wary in complexity - Id suggest to limit the Collection service functionality to persisting a message and insuring the delivery.

 I can think of  2 approaches to the collection service architecture. In both cases 
  a lightweight service instance is deployed alongside the app (one per host, if multiple apps are on the same host):
	a. have an app to communicate (IPC, loop) with the instance 
   	b. have the app to write a log file and the collection service takes over from there.
 Based on  my expirience, i'd examine option b as flexible, cost efficient, with predictible performance and less intrusive for the existing environment. 

Persistence layer:
 The persistent layer is critical piece for the system.
 in case of option b( for the collection service), we don't have to deal with a large number of concurrent connections on the “datastorage” part. As such we can enjoy an almost linear scaling using a pair of Apache servers (low level estimate: one per 10^4 hosts; 2 apps per server => 200x10^3 applications) ). Alternatevly, we can look into NGNIX servers and other frameworks (Twisted) to stand up the http ends to process the incoming streams.

// the use case for a specific data structure requirement is unclear.
 
 the amount of data to be streamed and (more importantly) analyzed asks for a cluster solution. 
 We can evaluate Riak with calculations' results (hourly/specified interval) offloaded onto Hadoop cluster. Alternatively we can examine Cassandra as solid solution for heavy write systems with flexible data model.


If there is a desire and time to invest into the solution, we can look into leveraging a Kafka base solution. Delivering astounding message write performance and been very flexible on the "query" service, it will take some time to develop and it will always require developers' time for developing a new performance reports.

In case of off-the-shell solution, with the focus on systems performance and data analyses:
 i'd look into following vendors/existing solutions:
		Splunk, SolarWinds,
		Graphite has lot of collection daemons/options



References:
http://docs.basho.com/riak/kv/2.2.3/learn/use-cases/
https://academy.datastax.com/use-cases/internet-of-things-time-series
https://www.nginx.com/solutions/
